{"ast":null,"code":"var _jsxFileName = \"/Users/dennischang/My Drive/Engineering/Projects/Line_Follower/Software/UserInterface/robot-sumo-dashboard/src/UserInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Button from '@mui/material/Button';\nimport { BrowserSerial } from \"browser-serial\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserInterface = () => {\n  _s();\n  const serial = new BrowserSerial();\n  let ConnectedPortWriter;\n  let writer;\n  const [IsConnected, setIsConnected] = useState(false);\n  const [ControlMode, setControlMode] = useState();\n\n  // const handleKeyPress = (event) => {\n  //     CommandHandler(event.code)\n  // }\n\n  // useEffect(() => {\n  //     document.addEventListener('keydown', handleKeyPress, true)\n  // }, [])\n\n  useEffect(() => {\n    console.log(IsConnected); // Log whenever IsConnected changes\n  }, [IsConnected]);\n\n  // const CommandHandler = (PressedKeyCode) => {\n  //     let MessageToSend = \"\"\n  //     if (PressedKeyCode == 'KeyA') {\n  //         MessageToSend = \"L\"\n  //     }\n  //     if (PressedKeyCode == 'KeyD') {\n  //         MessageToSend = \"R\"\n  //     }\n  //     if (PressedKeyCode == 'KeyS') {\n  //         MessageToSend = \"B\"\n  //     }\n  //     if (PressedKeyCode == 'KeyW') {\n  //         MessageToSend = \"F\"\n  //     }\n  //     SerialSend({ Prefix: \"K\", Suffix: MessageToSend })\n  // }\n\n  // const SerialSend = async ({ Prefix, Suffix }) => {\n  //     await navigator.serial.getPorts().then(async (ports) => {\n  //         console.log(ports);\n  //         const encoder = new TextEncoder();\n  //         writer = await ports[0].writable.getWriter()\n  //         await writer.write(encoder.encode(`${Prefix}${Suffix}\\n`));\n  //         writer.releaseLock();\n  //     })\n  // }\n\n  const OnUserClick = async () => {\n    await serial.connect().then();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Line Follower Console\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: OnUserClick,\n      variant: IsConnected ? \"contained\" : \"outlined\",\n      children: IsConnected ? \"Connected\" : \"Connect Device\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n_s(UserInterface, \"4C+mLUMmGX3bHt4IkZJwDx6+CCY=\");\n_c = UserInterface;\nexport default UserInterface;\nvar _c;\n$RefreshReg$(_c, \"UserInterface\");","map":{"version":3,"names":["React","useState","useEffect","Button","BrowserSerial","jsxDEV","_jsxDEV","UserInterface","_s","serial","ConnectedPortWriter","writer","IsConnected","setIsConnected","ControlMode","setControlMode","console","log","OnUserClick","connect","then","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","variant","_c","$RefreshReg$"],"sources":["/Users/dennischang/My Drive/Engineering/Projects/Line_Follower/Software/UserInterface/robot-sumo-dashboard/src/UserInterface.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Button from '@mui/material/Button';\nimport { BrowserSerial } from \"browser-serial\";\n\n\n\nconst UserInterface = () => {\n    const serial = new BrowserSerial();\n    let ConnectedPortWriter;\n    let writer\n    const [IsConnected, setIsConnected] = useState(false);\n    const [ControlMode, setControlMode] = useState();\n\n    // const handleKeyPress = (event) => {\n    //     CommandHandler(event.code)\n    // }\n\n    // useEffect(() => {\n    //     document.addEventListener('keydown', handleKeyPress, true)\n    // }, [])\n\n    useEffect(() => {\n        console.log(IsConnected); // Log whenever IsConnected changes\n    }, [IsConnected]);\n\n\n\n    // const CommandHandler = (PressedKeyCode) => {\n    //     let MessageToSend = \"\"\n    //     if (PressedKeyCode == 'KeyA') {\n    //         MessageToSend = \"L\"\n    //     }\n    //     if (PressedKeyCode == 'KeyD') {\n    //         MessageToSend = \"R\"\n    //     }\n    //     if (PressedKeyCode == 'KeyS') {\n    //         MessageToSend = \"B\"\n    //     }\n    //     if (PressedKeyCode == 'KeyW') {\n    //         MessageToSend = \"F\"\n    //     }\n    //     SerialSend({ Prefix: \"K\", Suffix: MessageToSend })\n    // }\n\n    // const SerialSend = async ({ Prefix, Suffix }) => {\n    //     await navigator.serial.getPorts().then(async (ports) => {\n    //         console.log(ports);\n    //         const encoder = new TextEncoder();\n    //         writer = await ports[0].writable.getWriter()\n    //         await writer.write(encoder.encode(`${Prefix}${Suffix}\\n`));\n    //         writer.releaseLock();\n    //     })\n    // }\n\n    const OnUserClick = async () => {\n        await serial.connect().then()\n    }\n\n    return (\n        <div>\n            <h1>Line Follower Console</h1>\n            <Button onClick={OnUserClick} variant={IsConnected ? \"contained\" : \"outlined\"}>{IsConnected ? \"Connected\" : \"Connect Device\"}</Button>\n            {/* <Button onClick={onUserClickDrivingMode} variant={ControlMode == 1 ? (\"contained\") : (\"outlined\")}>{ControlMode == 1 ? (\"Driving Mode Enabled\") : (\"Enable Driving Mode\")} </Button> */}\n        </div>\n    );\n}\n\nexport default UserInterface"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAASC,aAAa,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI/C,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,MAAM,GAAG,IAAIL,aAAa,CAAC,CAAC;EAClC,IAAIM,mBAAmB;EACvB,IAAIC,MAAM;EACV,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,CAAC;;EAEhD;EACA;EACA;;EAEA;EACA;EACA;;EAEAC,SAAS,CAAC,MAAM;IACZc,OAAO,CAACC,GAAG,CAACL,WAAW,CAAC,CAAC,CAAC;EAC9B,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;;EAIjB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMM,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B,MAAMT,MAAM,CAACU,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EACjC,CAAC;EAED,oBACId,OAAA;IAAAe,QAAA,gBACIf,OAAA;MAAAe,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9BnB,OAAA,CAACH,MAAM;MAACuB,OAAO,EAAER,WAAY;MAACS,OAAO,EAAEf,WAAW,GAAG,WAAW,GAAG,UAAW;MAAAS,QAAA,EAAET,WAAW,GAAG,WAAW,GAAG;IAAgB;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAErI,CAAC;AAEd,CAAC;AAAAjB,EAAA,CA3DKD,aAAa;AAAAqB,EAAA,GAAbrB,aAAa;AA6DnB,eAAeA,aAAa;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}