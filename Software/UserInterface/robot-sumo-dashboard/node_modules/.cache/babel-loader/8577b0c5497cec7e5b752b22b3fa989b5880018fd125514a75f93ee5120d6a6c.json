{"ast":null,"code":"var _jsxFileName = \"/Users/dennischang/My Drive/Engineering/Projects/Line_Follower/Software/UserInterface/robot-sumo-dashboard/src/UserInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Button from '@mui/material/Button';\nimport ControlPanel from './Control-Panel/ControlPanel';\nimport { BrowserSerial } from \"browser-serial\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserInterface = () => {\n  _s();\n  const serial = new BrowserSerial({\n    serialOptions: {\n      baudRate: 115200\n    }\n  });\n  let ConnectedPortWriter;\n  let writer;\n  const [IsConnected, setIsConnected] = useState(false);\n  const [ControlMode, setControlMode] = useState(\"\");\n  // const handleKeyPress = (event) => {\n  //     CommandHandler(event.code)\n  // }\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyPress, true);\n  }, []);\n  useEffect(() => {}, [ControlMode]);\n  useEffect(() => {\n    console.log(IsConnected); // Log whenever IsConnected changes\n  }, [IsConnected]);\n  const ChangeMode = ({\n    ModeSelected\n  }) => {\n    setControlMode(ModeSelected);\n  };\n  const handleKeyPress = keypressed => {\n    CommandHandler({\n      PressedKeyCode: keypressed.code\n    });\n  };\n  const CommandHandler = ({\n    PressedKeyCode\n  }) => {\n    let MessageToSend = '';\n    console.log(ControlMode);\n    if (ControlMode === 'Driving') {\n      // Driving Mode\n      switch (PressedKeyCode) {\n        case 'KeyA':\n          MessageToSend = 'L';\n          break;\n        case 'KeyD':\n          MessageToSend = 'R';\n          break;\n        case 'KeyS':\n          MessageToSend = 'B';\n          break;\n        case 'KeyW':\n          MessageToSend = 'F';\n          break;\n        case 'Space':\n          MessageToSend = 'S';\n          break;\n        default:\n          break;\n      }\n      if (MessageToSend) {\n        console.log(MessageToSend);\n        serial.write(`${ControlMode}${MessageToSend}`);\n      }\n    }\n  };\n  const OnUserClick = async () => {\n    if (IsConnected == false) {\n      try {\n        await serial.connect().then(() => {\n          setIsConnected(true);\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    } else {\n      try {\n        await serial.disconnect().then(() => {\n          setIsConnected(false);\n        });\n      } catch (e) {}\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ControlPanel, {\n      ModeSelected: ControlMode,\n      ChangeMode: ChangeMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingLeft: \"2vw\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Line Follower Console\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: OnUserClick,\n        variant: IsConnected ? \"contained\" : \"outlined\",\n        children: IsConnected ? \"Click to Disconnect\" : \"Click to Connect Device\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n_s(UserInterface, \"vGS6AdwTJ4JzKTdG+Mkt+b4sH9U=\");\n_c = UserInterface;\nexport default UserInterface;\nvar _c;\n$RefreshReg$(_c, \"UserInterface\");","map":{"version":3,"names":["React","useState","useEffect","Button","ControlPanel","BrowserSerial","jsxDEV","_jsxDEV","UserInterface","_s","serial","serialOptions","baudRate","ConnectedPortWriter","writer","IsConnected","setIsConnected","ControlMode","setControlMode","document","addEventListener","handleKeyPress","console","log","ChangeMode","ModeSelected","keypressed","CommandHandler","PressedKeyCode","code","MessageToSend","write","OnUserClick","connect","then","err","disconnect","e","style","display","children","fileName","_jsxFileName","lineNumber","columnNumber","paddingLeft","onClick","variant","_c","$RefreshReg$"],"sources":["/Users/dennischang/My Drive/Engineering/Projects/Line_Follower/Software/UserInterface/robot-sumo-dashboard/src/UserInterface.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Button from '@mui/material/Button';\nimport ControlPanel from './Control-Panel/ControlPanel';\nimport { BrowserSerial } from \"browser-serial\";\n\n\n\nconst UserInterface = () => {\n    const serial = new BrowserSerial({ serialOptions: { baudRate: 115200 } });\n    let ConnectedPortWriter;\n    let writer\n    const [IsConnected, setIsConnected] = useState(false);\n    const [ControlMode, setControlMode] = useState(\"\");\n    // const handleKeyPress = (event) => {\n    //     CommandHandler(event.code)\n    // }\n\n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyPress, true)\n    }, [])\n\n    useEffect(()=>{\n        \n    },[ControlMode])\n    useEffect(() => {\n        console.log(IsConnected); // Log whenever IsConnected changes\n    }, [IsConnected]);\n\n    const ChangeMode = ({ ModeSelected }) => {\n        setControlMode(ModeSelected);\n    }\n\n    const handleKeyPress = (keypressed) => {\n        CommandHandler({ PressedKeyCode: keypressed.code })\n    }\n\n    const CommandHandler = ({ PressedKeyCode }) => {\n        let MessageToSend = ''\n        console.log(ControlMode)\n        if (ControlMode === 'Driving') { // Driving Mode\n            switch (PressedKeyCode) {\n                case 'KeyA':\n                    MessageToSend = 'L';\n                    break;\n                case 'KeyD':\n                    MessageToSend = 'R';\n                    break;\n                case 'KeyS':\n                    MessageToSend = 'B';\n                    break;\n                case 'KeyW':\n                    MessageToSend = 'F';\n                    break;\n                case 'Space':\n                    MessageToSend = 'S';\n                    break;\n                default:\n                    break;\n            }\n            if (MessageToSend) {\n                console.log(MessageToSend)\n                serial.write(`${ControlMode}${MessageToSend}`);\n            }\n        }\n    }\n\n    const OnUserClick = async () => {\n        if (IsConnected == false) {\n            try {\n                await serial.connect().then(() => {\n                    setIsConnected(true)\n                })\n            }\n            catch (err) { console.log(err) }\n        } else {\n            try {\n                await serial.disconnect().then(() => {\n                    setIsConnected(false)\n                })\n            } catch (e) {\n\n            }\n        }\n    }\n\n\n    return (\n        <div style={{ display: \"flex\" }}>\n            <ControlPanel ModeSelected={ControlMode} ChangeMode={ChangeMode} />\n            <div style={{ paddingLeft: \"2vw\" }}>\n                <h2>Line Follower Console</h2>\n                <Button onClick={OnUserClick} variant={IsConnected ? \"contained\" : \"outlined\"}>{IsConnected ? \"Click to Disconnect\" : \"Click to Connect Device\"}</Button>\n\n            </div>\n        </div >\n    );\n}\n\nexport default UserInterface"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}