{"ast":null,"code":"var _jsxFileName = \"/Users/dennischang/My Drive/Engineering/Projects/Line_Follower/Software/UserInterface/robot-sumo-dashboard/src/UserInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Button from '@mui/material/Button';\nimport ControlPanel from './Control-Panel/ControlPanel';\nimport TuningPanel from './Tuning/TuningPanel';\nimport { BrowserSerial } from \"browser-serial\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserInterface = () => {\n  _s();\n  const serial = new BrowserSerial({\n    serialOptions: {\n      baudRate: 115200\n    }\n  });\n  let ConnectedPortWriter;\n  let writer;\n  const [IsConnected, setIsConnected] = useState(false);\n  const [ControlMode, setControlMode] = useState(\"\");\n  const [TuningData, setTuningData] = useState({});\n  const d = useRef(ControlMode);\n\n  // const handleKeyPress = (event) => {\n  //     CommandHandler(event.code)\n  // }\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyPress, true);\n  }, []);\n  useEffect(() => {\n    d.current = ControlMode;\n  }, [ControlMode]);\n  useEffect(() => {\n    console.log(IsConnected); // Log whenever IsConnected changes\n  }, [IsConnected]);\n  const ChangeMode = ({\n    ModeSelected\n  }) => {\n    setControlMode(ModeSelected);\n  };\n  const handleKeyPress = keypressed => {\n    DrivingCommandHandler({\n      Mode: d.current,\n      PressedKeyCode: keypressed.code\n    });\n  };\n  const onUserChangeTuningData = ({\n    KP,\n    KD,\n    Max_Speed\n  }) => {\n    console.log(KD, KP, Max_Speed);\n  };\n  const DrivingCommandHandler = ({\n    Mode,\n    PressedKeyCode\n  }) => {\n    let MessageToSend = '';\n    if (Mode == 'Driving') {\n      // Driving Mode\n      switch (PressedKeyCode) {\n        case 'KeyA':\n          MessageToSend = 'L';\n          break;\n        case 'KeyD':\n          MessageToSend = 'R';\n          break;\n        case 'KeyS':\n          MessageToSend = 'B';\n          break;\n        case 'KeyW':\n          MessageToSend = 'F';\n          break;\n        case 'Space':\n          MessageToSend = 'S';\n          break;\n        default:\n          break;\n      }\n      if (MessageToSend) {\n        console.log(`${Mode[0]}${MessageToSend}`);\n        serial.write(`${Mode[0]}${MessageToSend}`);\n      }\n    }\n  };\n  const OnUserClick = async () => {\n    if (IsConnected == false) {\n      try {\n        await serial.connect().then(() => {\n          setIsConnected(true);\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    } else {\n      try {\n        await serial.disconnect().then(() => {\n          setIsConnected(false);\n        });\n      } catch (e) {}\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ControlPanel, {\n      ModeSelected: ControlMode,\n      ChangeMode: ChangeMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingLeft: \"2vw\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Line Follower Console\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: OnUserClick,\n        variant: IsConnected ? \"contained\" : \"outlined\",\n        children: IsConnected ? \"Click to Disconnect\" : \"Click to Connect Device\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TuningPanel, {\n        display: ControlMode == \"Tuning\" ? true : false,\n        setTuningData: onUserChangeTuningData,\n        TuningData: TuningData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n_s(UserInterface, \"DWjlRhEuNkFrMse58iySOf2cb8Q=\");\n_c = UserInterface;\nexport default UserInterface;\nvar _c;\n$RefreshReg$(_c, \"UserInterface\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Button","ControlPanel","TuningPanel","BrowserSerial","jsxDEV","_jsxDEV","UserInterface","_s","serial","serialOptions","baudRate","ConnectedPortWriter","writer","IsConnected","setIsConnected","ControlMode","setControlMode","TuningData","setTuningData","d","document","addEventListener","handleKeyPress","current","console","log","ChangeMode","ModeSelected","keypressed","DrivingCommandHandler","Mode","PressedKeyCode","code","onUserChangeTuningData","KP","KD","Max_Speed","MessageToSend","write","OnUserClick","connect","then","err","disconnect","e","style","display","children","fileName","_jsxFileName","lineNumber","columnNumber","paddingLeft","onClick","variant","_c","$RefreshReg$"],"sources":["/Users/dennischang/My Drive/Engineering/Projects/Line_Follower/Software/UserInterface/robot-sumo-dashboard/src/UserInterface.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Button from '@mui/material/Button';\nimport ControlPanel from './Control-Panel/ControlPanel';\nimport TuningPanel from './Tuning/TuningPanel';\nimport { BrowserSerial } from \"browser-serial\";\n\n\n\nconst UserInterface = () => {\n    const serial = new BrowserSerial({ serialOptions: { baudRate: 115200 } });\n    let ConnectedPortWriter;\n    let writer\n    const [IsConnected, setIsConnected] = useState(false);\n    const [ControlMode, setControlMode] = useState(\"\");\n    const [TuningData, setTuningData] = useState({});\n\n    const d = useRef(ControlMode);\n\n    // const handleKeyPress = (event) => {\n    //     CommandHandler(event.code)\n    // }\n\n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyPress, true)\n    }, [])\n\n    useEffect(() => {\n        d.current = ControlMode;\n    }, [ControlMode]);\n\n    useEffect(() => {\n        console.log(IsConnected); // Log whenever IsConnected changes\n    }, [IsConnected]);\n\n    const ChangeMode = ({ ModeSelected }) => {\n        setControlMode(ModeSelected);\n    }\n\n    const handleKeyPress = (keypressed) => {\n        DrivingCommandHandler({ Mode: d.current, PressedKeyCode: keypressed.code })\n    }\n\n    const onUserChangeTuningData = ({ KP, KD, Max_Speed }) => {\n        console.log(KD, KP, Max_Speed)\n    }\n\n    const DrivingCommandHandler = ({ Mode, PressedKeyCode }) => {\n        let MessageToSend = ''\n        if (Mode == 'Driving') { // Driving Mode\n            switch (PressedKeyCode) {\n                case 'KeyA':\n                    MessageToSend = 'L';\n                    break;\n                case 'KeyD':\n                    MessageToSend = 'R';\n                    break;\n                case 'KeyS':\n                    MessageToSend = 'B';\n                    break;\n                case 'KeyW':\n                    MessageToSend = 'F';\n                    break;\n                case 'Space':\n                    MessageToSend = 'S';\n                    break;\n                default:\n                    break;\n            }\n            if (MessageToSend) {\n                console.log(`${Mode[0]}${MessageToSend}`)\n                serial.write(`${Mode[0]}${MessageToSend}`);\n            }\n        }\n    }\n\n    const OnUserClick = async () => {\n        if (IsConnected == false) {\n            try {\n                await serial.connect().then(() => {\n                    setIsConnected(true)\n                })\n            }\n            catch (err) { console.log(err) }\n        } else {\n            try {\n                await serial.disconnect().then(() => {\n                    setIsConnected(false)\n                })\n            } catch (e) {\n\n            }\n        }\n    }\n\n\n    return (\n        <div style={{ display: \"flex\" }}>\n            <ControlPanel ModeSelected={ControlMode} ChangeMode={ChangeMode} />\n            <div style={{ paddingLeft: \"2vw\" }}>\n                <h2>Line Follower Console</h2>\n                <Button onClick={OnUserClick} variant={IsConnected ? \"contained\" : \"outlined\"}>{IsConnected ? \"Click to Disconnect\" : \"Click to Connect Device\"}</Button>\n                <TuningPanel display={ControlMode == \"Tuning\" ? true : false} setTuningData={onUserChangeTuningData} TuningData={TuningData} />\n            </div>\n        </div >\n    );\n}\n\nexport default UserInterface"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,YAAY,MAAM,8BAA8B;AACvD,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,SAASC,aAAa,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI/C,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,MAAM,GAAG,IAAIL,aAAa,CAAC;IAAEM,aAAa,EAAE;MAAEC,QAAQ,EAAE;IAAO;EAAE,CAAC,CAAC;EACzE,IAAIC,mBAAmB;EACvB,IAAIC,MAAM;EACV,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACoB,UAAU,EAAEC,aAAa,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEhD,MAAMsB,CAAC,GAAGpB,MAAM,CAACgB,WAAW,CAAC;;EAE7B;EACA;EACA;;EAEAjB,SAAS,CAAC,MAAM;IACZsB,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAEC,cAAc,EAAE,IAAI,CAAC;EAC9D,CAAC,EAAE,EAAE,CAAC;EAENxB,SAAS,CAAC,MAAM;IACZqB,CAAC,CAACI,OAAO,GAAGR,WAAW;EAC3B,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjBjB,SAAS,CAAC,MAAM;IACZ0B,OAAO,CAACC,GAAG,CAACZ,WAAW,CAAC,CAAC,CAAC;EAC9B,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,MAAMa,UAAU,GAAGA,CAAC;IAAEC;EAAa,CAAC,KAAK;IACrCX,cAAc,CAACW,YAAY,CAAC;EAChC,CAAC;EAED,MAAML,cAAc,GAAIM,UAAU,IAAK;IACnCC,qBAAqB,CAAC;MAAEC,IAAI,EAAEX,CAAC,CAACI,OAAO;MAAEQ,cAAc,EAAEH,UAAU,CAACI;IAAK,CAAC,CAAC;EAC/E,CAAC;EAED,MAAMC,sBAAsB,GAAGA,CAAC;IAAEC,EAAE;IAAEC,EAAE;IAAEC;EAAU,CAAC,KAAK;IACtDZ,OAAO,CAACC,GAAG,CAACU,EAAE,EAAED,EAAE,EAAEE,SAAS,CAAC;EAClC,CAAC;EAED,MAAMP,qBAAqB,GAAGA,CAAC;IAAEC,IAAI;IAAEC;EAAe,CAAC,KAAK;IACxD,IAAIM,aAAa,GAAG,EAAE;IACtB,IAAIP,IAAI,IAAI,SAAS,EAAE;MAAE;MACrB,QAAQC,cAAc;QAClB,KAAK,MAAM;UACPM,aAAa,GAAG,GAAG;UACnB;QACJ,KAAK,MAAM;UACPA,aAAa,GAAG,GAAG;UACnB;QACJ,KAAK,MAAM;UACPA,aAAa,GAAG,GAAG;UACnB;QACJ,KAAK,MAAM;UACPA,aAAa,GAAG,GAAG;UACnB;QACJ,KAAK,OAAO;UACRA,aAAa,GAAG,GAAG;UACnB;QACJ;UACI;MACR;MACA,IAAIA,aAAa,EAAE;QACfb,OAAO,CAACC,GAAG,CAAE,GAAEK,IAAI,CAAC,CAAC,CAAE,GAAEO,aAAc,EAAC,CAAC;QACzC7B,MAAM,CAAC8B,KAAK,CAAE,GAAER,IAAI,CAAC,CAAC,CAAE,GAAEO,aAAc,EAAC,CAAC;MAC9C;IACJ;EACJ,CAAC;EAED,MAAME,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI1B,WAAW,IAAI,KAAK,EAAE;MACtB,IAAI;QACA,MAAML,MAAM,CAACgC,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;UAC9B3B,cAAc,CAAC,IAAI,CAAC;QACxB,CAAC,CAAC;MACN,CAAC,CACD,OAAO4B,GAAG,EAAE;QAAElB,OAAO,CAACC,GAAG,CAACiB,GAAG,CAAC;MAAC;IACnC,CAAC,MAAM;MACH,IAAI;QACA,MAAMlC,MAAM,CAACmC,UAAU,CAAC,CAAC,CAACF,IAAI,CAAC,MAAM;UACjC3B,cAAc,CAAC,KAAK,CAAC;QACzB,CAAC,CAAC;MACN,CAAC,CAAC,OAAO8B,CAAC,EAAE,CAEZ;IACJ;EACJ,CAAC;EAGD,oBACIvC,OAAA;IAAKwC,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC5B1C,OAAA,CAACJ,YAAY;MAAC0B,YAAY,EAAEZ,WAAY;MAACW,UAAU,EAAEA;IAAW;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnE9C,OAAA;MAAKwC,KAAK,EAAE;QAAEO,WAAW,EAAE;MAAM,CAAE;MAAAL,QAAA,gBAC/B1C,OAAA;QAAA0C,QAAA,EAAI;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9B9C,OAAA,CAACL,MAAM;QAACqD,OAAO,EAAEd,WAAY;QAACe,OAAO,EAAEzC,WAAW,GAAG,WAAW,GAAG,UAAW;QAAAkC,QAAA,EAAElC,WAAW,GAAG,qBAAqB,GAAG;MAAyB;QAAAmC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC,eACzJ9C,OAAA,CAACH,WAAW;QAAC4C,OAAO,EAAE/B,WAAW,IAAI,QAAQ,GAAG,IAAI,GAAG,KAAM;QAACG,aAAa,EAAEe,sBAAuB;QAAChB,UAAU,EAAEA;MAAW;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9H,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEf,CAAC;AAAA5C,EAAA,CAjGKD,aAAa;AAAAiD,EAAA,GAAbjD,aAAa;AAmGnB,eAAeA,aAAa;AAAA,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}