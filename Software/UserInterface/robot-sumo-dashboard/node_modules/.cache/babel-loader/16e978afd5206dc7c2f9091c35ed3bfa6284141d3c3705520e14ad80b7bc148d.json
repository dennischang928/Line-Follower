{"ast":null,"code":"var _jsxFileName = \"/Users/dennischang/My Drive/Engineering/Projects/Line-Follower/Software/UserInterface/robot-sumo-dashboard/src/UserInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Button from '@mui/material/Button';\nimport ControlPanel from './Control-Panel/ControlPanel';\nimport TuningPanel from './Tuning/TuningPanel';\nimport { BrowserSerial } from \"browser-serial\";\nimport Monitor from './Monitor/Monitor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst serial = new BrowserSerial({\n  serialOptions: {\n    baudRate: 115200\n  }\n});\nserial.readLoop(console.log);\nconst UserInterface = () => {\n  _s();\n  let ConnectedPortWriter;\n  let writer;\n  const [IsConnected, setIsConnected] = useState(false);\n  const [ControlMode, setControlMode] = useState(\"\");\n  const [TuningData, setTuningData] = useState({\n    KP: 1,\n    KD: 1,\n    Max_Speed: 1\n  });\n  const d = useRef(ControlMode);\n\n  // const handleKeyPress = (event) => {\n  //     CommandHandler(event.code)\n  // }\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyPress, true);\n  }, []);\n  useEffect(() => {\n    d.current = ControlMode;\n  }, [ControlMode]);\n  useEffect(() => {\n    console.log(IsConnected); // Log whenever IsConnected changes\n  }, [IsConnected]);\n  const ChangeMode = ModeSelected => {\n    setControlMode(ModeSelected);\n  };\n  const onUserClickSend = () => {\n    TuningCommanderHandler({\n      Mode: ControlMode,\n      TuningData: TuningData\n    });\n  };\n  const TuningCommanderHandler = ({\n    Mode,\n    TuningData\n  }) => {\n    if (Mode == \"Tuning\") {\n      serial.write(`TP${TuningData.KP}D${TuningData.KD}MxSP${TuningData.Max_Speed}`);\n    }\n  };\n  const handleKeyPress = keypressed => {\n    DrivingCommandHandler({\n      Mode: d.current,\n      PressedKeyCode: keypressed.code\n    });\n  };\n  const onUserChangeTuningData = ({\n    KP,\n    KD,\n    Max_Speed\n  }) => {\n    setTuningData({\n      ...TuningData,\n      KP: KP ? KP : TuningData.KP,\n      KD: KD ? KD : TuningData.KD,\n      Max_Speed: Max_Speed ? Max_Speed : TuningData.Max_Speed\n    });\n  };\n  const DrivingCommandHandler = ({\n    Mode,\n    PressedKeyCode\n  }) => {\n    let MessageToSend = '';\n    if (Mode == 'Driving') {\n      // Driving Mode\n      switch (PressedKeyCode) {\n        case 'KeyA':\n          MessageToSend = 'L';\n          break;\n        case 'KeyD':\n          MessageToSend = 'R';\n          break;\n        case 'KeyS':\n          MessageToSend = 'B';\n          break;\n        case 'KeyW':\n          MessageToSend = 'F';\n          break;\n        case 'Space':\n          MessageToSend = 'S';\n          break;\n        default:\n          break;\n      }\n      if (MessageToSend) {\n        console.log(`${Mode[0]}${MessageToSend}`);\n        serial.write(`${Mode[0]}${MessageToSend}`);\n      }\n    }\n  };\n  const onUserClickCalibration = () => {\n    serial.write(\"C\");\n  };\n  const OnUserClickConnect = async () => {\n    if (IsConnected == false) {\n      try {\n        await serial.connect().then(() => {\n          setIsConnected(true);\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    } else {\n      try {\n        await serial.disconnect().then(() => {\n          setIsConnected(false);\n        });\n      } catch (e) {}\n    }\n  };\n  const TuningPanelRender = () => {\n    if (ControlMode == \"Tuning\") {\n      return /*#__PURE__*/_jsxDEV(TuningPanel, {\n        onUserChangeTuningData: onUserChangeTuningData,\n        TuningData: TuningData,\n        onUserClickSend: onUserClickSend,\n        onUserClickCalibration: onUserClickCalibration\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 20\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ControlPanel, {\n      ModeSelected: ControlMode,\n      ChangeMode: ChangeMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingLeft: \"2vw\",\n        width: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Line Follower Console\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: OnUserClickConnect,\n        variant: IsConnected ? \"contained\" : \"outlined\",\n        children: IsConnected ? \"Click to Disconnect\" : \"Click to Connect Device\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), TuningPanelRender(), /*#__PURE__*/_jsxDEV(Monitor, {\n        Error: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 9\n  }, this);\n};\n_s(UserInterface, \"+PNHzH1AxvJW+Cfjgv4hNGAaML8=\");\n_c = UserInterface;\nexport default UserInterface;\nvar _c;\n$RefreshReg$(_c, \"UserInterface\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Button","ControlPanel","TuningPanel","BrowserSerial","Monitor","jsxDEV","_jsxDEV","serial","serialOptions","baudRate","readLoop","console","log","UserInterface","_s","ConnectedPortWriter","writer","IsConnected","setIsConnected","ControlMode","setControlMode","TuningData","setTuningData","KP","KD","Max_Speed","d","document","addEventListener","handleKeyPress","current","ChangeMode","ModeSelected","onUserClickSend","TuningCommanderHandler","Mode","write","keypressed","DrivingCommandHandler","PressedKeyCode","code","onUserChangeTuningData","MessageToSend","onUserClickCalibration","OnUserClickConnect","connect","then","err","disconnect","e","TuningPanelRender","fileName","_jsxFileName","lineNumber","columnNumber","style","display","children","paddingLeft","width","onClick","variant","Error","_c","$RefreshReg$"],"sources":["/Users/dennischang/My Drive/Engineering/Projects/Line-Follower/Software/UserInterface/robot-sumo-dashboard/src/UserInterface.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Button from '@mui/material/Button';\nimport ControlPanel from './Control-Panel/ControlPanel';\nimport TuningPanel from './Tuning/TuningPanel';\nimport { BrowserSerial } from \"browser-serial\";\nimport Monitor from './Monitor/Monitor';\n\n\nconst serial = new BrowserSerial({ serialOptions: { baudRate: 115200 } });\nserial.readLoop(console.log)\n\nconst UserInterface = () => {\n    let ConnectedPortWriter;\n    let writer\n    const [IsConnected, setIsConnected] = useState(false);\n    const [ControlMode, setControlMode] = useState(\"\");\n    const [TuningData, setTuningData] = useState({\n        KP: 1,\n        KD: 1,\n        Max_Speed: 1,\n    });\n\n    const d = useRef(ControlMode);\n\n    // const handleKeyPress = (event) => {\n    //     CommandHandler(event.code)\n    // }\n\n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyPress, true)\n    }, [])\n\n    useEffect(() => {\n        d.current = ControlMode;\n    }, [ControlMode]);\n\n    useEffect(() => {\n        console.log(IsConnected); // Log whenever IsConnected changes\n    }, [IsConnected]);\n\n\n    const ChangeMode = (ModeSelected) => {\n        setControlMode(ModeSelected);\n    }\n\n\n\n    const onUserClickSend = () => {\n        TuningCommanderHandler({ Mode: ControlMode, TuningData: TuningData })\n    }\n\n    const TuningCommanderHandler = ({ Mode, TuningData }) => {\n        if (Mode == \"Tuning\") {\n            serial.write(`TP${TuningData.KP}D${TuningData.KD}MxSP${TuningData.Max_Speed}`)\n        }\n    }\n\n    const handleKeyPress = (keypressed) => {\n        DrivingCommandHandler({ Mode: d.current, PressedKeyCode: keypressed.code })\n    }\n\n\n    const onUserChangeTuningData = ({ KP, KD, Max_Speed }) => {\n        setTuningData({\n            ...TuningData,\n            KP: KP ? KP : TuningData.KP,\n            KD: KD ? KD : TuningData.KD,\n            Max_Speed: Max_Speed ? Max_Speed : TuningData.Max_Speed,\n        })\n    }\n\n    const DrivingCommandHandler = ({ Mode, PressedKeyCode }) => {\n        let MessageToSend = ''\n        if (Mode == 'Driving') { // Driving Mode\n            switch (PressedKeyCode) {\n                case 'KeyA':\n                    MessageToSend = 'L';\n                    break;\n                case 'KeyD':\n                    MessageToSend = 'R';\n                    break;\n                case 'KeyS':\n                    MessageToSend = 'B';\n                    break;\n                case 'KeyW':\n                    MessageToSend = 'F';\n                    break;\n                case 'Space':\n                    MessageToSend = 'S';\n                    break;\n                default:\n                    break;\n            }\n            if (MessageToSend) {\n                console.log(`${Mode[0]}${MessageToSend}`)\n                serial.write(`${Mode[0]}${MessageToSend}`);\n            }\n        }\n    }\n\n    const onUserClickCalibration = () => {\n        serial.write(\"C\")\n    }\n\n    const OnUserClickConnect = async () => {\n        if (IsConnected == false) {\n            try {\n                await serial.connect().then(() => {\n                    setIsConnected(true)\n                })\n            }\n            catch (err) { console.log(err) }\n        } else {\n            try {\n                await serial.disconnect().then(() => {\n                    setIsConnected(false)\n                })\n            } catch (e) {\n            }\n        }\n    }\n\n\n\n    const TuningPanelRender = () => {\n        if (ControlMode == \"Tuning\") {\n            return <TuningPanel\n                onUserChangeTuningData={onUserChangeTuningData} TuningData={TuningData}\n                onUserClickSend={onUserClickSend} onUserClickCalibration={onUserClickCalibration} />\n        }\n    }\n\n    return (\n        <div style={{ display: \"flex\" }}>\n            <ControlPanel ModeSelected={ControlMode} ChangeMode={ChangeMode} />\n            <div style={{ paddingLeft: \"2vw\", width: \"100%\" }}>\n                <h2>Line Follower Console</h2>\n                <Button onClick={OnUserClickConnect} variant={IsConnected ? \"contained\" : \"outlined\"}>{IsConnected ? \"Click to Disconnect\" : \"Click to Connect Device\"}</Button>\n                {TuningPanelRender()}\n                <Monitor Error={0} />\n            </div>\n        </div >\n    );\n}\n\nexport default UserInterface"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}