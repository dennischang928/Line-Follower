{"ast":null,"code":"var _jsxFileName = \"/Users/dennischang/My Drive/Engineering/Projects/Line_Follower/Software/UserInterface/robot-sumo-dashboard/src/UserInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Button from '@mui/material/Button';\nimport { BrowserSerial } from \"browser-serial\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserInterface = () => {\n  _s();\n  const serial = new BrowserSerial({\n    serialOptions: {\n      baudRate: 115200\n    }\n  });\n  let ConnectedPortWriter;\n  let writer;\n  const [IsConnected, setIsConnected] = useState(false);\n  const [ControlMode, setControlMode] = useState();\n  const [Mode, setMode] = useState('D'); // Driving\n  // const handleKeyPress = (event) => {\n  //     CommandHandler(event.code)\n  // }\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyPress, true);\n  }, []);\n  useEffect(() => {\n    console.log(IsConnected); // Log whenever IsConnected changes\n  }, [IsConnected]);\n  const handleKeyPress = keypressed => {\n    CommandHandler({\n      Mode: Mode,\n      PressedKeyCode: keypressed.code\n    });\n  };\n  const CommandHandler = ({\n    Mode,\n    PressedKeyCode\n  }) => {\n    let MessageToSend = '';\n    if (Mode == 'D') {\n      //Driving Mode\n      console.log(PressedKeyCode);\n      if (PressedKeyCode == 'KeyA') {\n        MessageToSend = \"L\";\n      }\n      if (PressedKeyCode == 'KeyD') {\n        MessageToSend = \"R\";\n      }\n      if (PressedKeyCode == 'KeyS') {\n        MessageToSend = \"B\";\n      }\n      if (PressedKeyCode == 'KeyW') {\n        MessageToSend = \"F\";\n      }\n      serial.write(`${Mode}${MessageToSend}`);\n    }\n    as;\n  };\n\n  // const SerialSend = async ({ Prefix, Suffix }) => {\n  //     await navigator.serial.getPorts().then(async (ports) => {\n  //         console.log(ports);\n  //         const encoder = new TextEncoder();\n  //         writer = await ports[0].writable.getWriter()\n  //         await writer.write(encoder.encode(`${Prefix}${Suffix}\\n`));\n  //         writer.releaseLock();\n  //     })\n  // }\n\n  const OnUserClick = async () => {\n    try {\n      await serial.connect();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Line Follower Console\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: OnUserClick,\n      variant: IsConnected ? \"contained\" : \"outlined\",\n      children: IsConnected ? \"Connected\" : \"Connect Device\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(UserInterface, \"5olJDLIus2J7YCZ4xXXXMMO6zz0=\");\n_c = UserInterface;\nexport default UserInterface;\nvar _c;\n$RefreshReg$(_c, \"UserInterface\");","map":{"version":3,"names":["React","useState","useEffect","Button","BrowserSerial","jsxDEV","_jsxDEV","UserInterface","_s","serial","serialOptions","baudRate","ConnectedPortWriter","writer","IsConnected","setIsConnected","ControlMode","setControlMode","Mode","setMode","document","addEventListener","handleKeyPress","console","log","keypressed","CommandHandler","PressedKeyCode","code","MessageToSend","write","as","OnUserClick","connect","err","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","variant","_c","$RefreshReg$"],"sources":["/Users/dennischang/My Drive/Engineering/Projects/Line_Follower/Software/UserInterface/robot-sumo-dashboard/src/UserInterface.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Button from '@mui/material/Button';\nimport { BrowserSerial } from \"browser-serial\";\n\n\n\nconst UserInterface = () => {\n    const serial = new BrowserSerial({ serialOptions: { baudRate: 115200 } });\n    let ConnectedPortWriter;\n    let writer\n    const [IsConnected, setIsConnected] = useState(false);\n    const [ControlMode, setControlMode] = useState();\n    const [Mode, setMode] = useState('D') // Driving\n    // const handleKeyPress = (event) => {\n    //     CommandHandler(event.code)\n    // }\n\n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyPress, true)\n    }, [])\n\n    useEffect(() => {\n        console.log(IsConnected); // Log whenever IsConnected changes\n    }, [IsConnected]);\n\n    const handleKeyPress = (keypressed) => {\n        CommandHandler({ Mode: Mode, PressedKeyCode: keypressed.code })\n    }\n\n    const CommandHandler = ({ Mode, PressedKeyCode }) => {\n        let MessageToSend = ''\n        if (Mode == 'D') { //Driving Mode\n            console.log(PressedKeyCode)\n            if (PressedKeyCode == 'KeyA') {\n                MessageToSend = \"L\"\n            }\n            if (PressedKeyCode == 'KeyD') {\n                MessageToSend = \"R\"\n            }\n            if (PressedKeyCode == 'KeyS') {\n                MessageToSend = \"B\"\n            }\n            if (PressedKeyCode == 'KeyW') {\n                MessageToSend = \"F\"\n            }\n            serial.write(`${Mode}${MessageToSend}`)\n        }as\n    }\n\n    // const SerialSend = async ({ Prefix, Suffix }) => {\n    //     await navigator.serial.getPorts().then(async (ports) => {\n    //         console.log(ports);\n    //         const encoder = new TextEncoder();\n    //         writer = await ports[0].writable.getWriter()\n    //         await writer.write(encoder.encode(`${Prefix}${Suffix}\\n`));\n    //         writer.releaseLock();\n    //     })\n    // }\n\n    const OnUserClick = async () => {\n        try { await serial.connect() }\n        catch (err) { console.log(err) }\n    }\n\n\n    return (\n        <div>\n            <h1>Line Follower Console</h1>\n            <Button onClick={OnUserClick} variant={IsConnected ? \"contained\" : \"outlined\"}>{IsConnected ? \"Connected\" : \"Connect Device\"}</Button>\n            {/* <Button onClick={onUserClickDrivingMode} variant={ControlMode == 1 ? (\"contained\") : (\"outlined\")}>{ControlMode == 1 ? (\"Driving Mode Enabled\") : (\"Enable Driving Mode\")} </Button> */}\n        </div>\n    );\n}\n\nexport default UserInterface"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}