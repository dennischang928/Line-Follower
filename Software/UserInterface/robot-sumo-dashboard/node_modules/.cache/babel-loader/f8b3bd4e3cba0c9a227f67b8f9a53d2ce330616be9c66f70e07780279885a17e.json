{"ast":null,"code":"var _jsxFileName = \"/Users/dennischang/My Drive/Engineering/Projects/Line_Follower/Software/UserInterface/robot-sumo-dashboard/src/UserInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Button from '@mui/material/Button';\nimport ControlPanel from './Control-Panel/ControlPanel';\nimport TuningPanel from './Tuning/TuningPanel';\nimport { BrowserSerial } from \"browser-serial\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserInterface = () => {\n  _s();\n  const serial = new BrowserSerial({\n    serialOptions: {\n      baudRate: 115200\n    }\n  });\n  let ConnectedPortWriter;\n  let writer;\n  const [IsConnected, setIsConnected] = useState(false);\n  const [ControlMode, setControlMode] = useState(\"\");\n  const [TuningData, setTuningData] = useState({\n    KP: 1,\n    KD: 1,\n    Max_Speed: 1\n  });\n  const d = useRef(ControlMode);\n\n  // const handleKeyPress = (event) => {\n  //     CommandHandler(event.code)\n  // }\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyPress, true);\n  }, []);\n  useEffect(() => {\n    d.current = ControlMode;\n  }, [ControlMode]);\n  useEffect(() => {\n    console.log(IsConnected); // Log whenever IsConnected changes\n  }, [IsConnected]);\n  const ChangeMode = ({\n    ModeSelected\n  }) => {\n    setControlMode(ModeSelected);\n  };\n  const onUserClickSend = () => {\n    DrivingCommandHandler({\n      Mode: \"Tuning\",\n      PressedKeyCode: \"B\"\n    });\n    // TuningCommanderHandler({ Mode: ControlMode, TuningData: TuningData })\n  };\n\n  const TuningCommanderHandler = ({\n    Mode,\n    TuningData\n  }) => {\n    // console.log(\"Wr\")\n    DrivingCommandHandler({\n      Mode: d.current,\n      PressedKeyCode: \"B\"\n    });\n  };\n  const handleKeyPress = keypressed => {\n    DrivingCommandHandler({\n      Mode: d.current,\n      PressedKeyCode: keypressed.code\n    });\n  };\n  const onUserChangeTuningData = ({\n    KP,\n    KD,\n    Max_Speed\n  }) => {\n    setTuningData({\n      ...TuningData,\n      KP: KP ? KP : TuningData.KP,\n      KD: KD ? KD : TuningData.KD,\n      Max_Speed: Max_Speed ? Max_Speed : TuningData.Max_Speed\n    });\n  };\n  const DrivingCommandHandler = ({\n    Mode,\n    PressedKeyCode\n  }) => {\n    let MessageToSend = '';\n    if (Mode == 'Driving') {\n      // Driving Mode\n      switch (PressedKeyCode) {\n        case 'KeyA':\n          MessageToSend = 'L';\n          break;\n        case 'KeyD':\n          MessageToSend = 'R';\n          break;\n        case 'KeyS':\n          MessageToSend = 'B';\n          break;\n        case 'KeyW':\n          MessageToSend = 'F';\n          break;\n        case 'Space':\n          MessageToSend = 'S';\n          break;\n        default:\n          break;\n      }\n      if (MessageToSend) {\n        console.log(`${Mode[0]}${MessageToSend}`);\n        serial.write(`${Mode[0]}${MessageToSend}`);\n      }\n    }\n  };\n  const OnUserClickConnect = async () => {\n    if (IsConnected == false) {\n      try {\n        await serial.connect().then(() => {\n          setIsConnected(true);\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    } else {\n      try {\n        await serial.disconnect().then(() => {\n          setIsConnected(false);\n        });\n      } catch (e) {}\n    }\n  };\n  const TuningPanelRender = () => {\n    if (ControlMode == \"Tuning\") {\n      return /*#__PURE__*/_jsxDEV(TuningPanel, {\n        onUserChangeTuningData: onUserChangeTuningData,\n        TuningData: TuningData,\n        onUserClickSend: onUserClickSend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 20\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ControlPanel, {\n      ModeSelecxted: ControlMode,\n      ChangeMode: ChangeMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingLeft: \"2vw\",\n        width: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Line Follower Console\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: OnUserClickConnect,\n        variant: IsConnected ? \"contained\" : \"outlined\",\n        children: IsConnected ? \"Click to Disconnect\" : \"Click to Connect Device\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), TuningPanelRender(), \"s\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n};\n_s(UserInterface, \"+PNHzH1AxvJW+Cfjgv4hNGAaML8=\");\n_c = UserInterface;\nexport default UserInterface;\nvar _c;\n$RefreshReg$(_c, \"UserInterface\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Button","ControlPanel","TuningPanel","BrowserSerial","jsxDEV","_jsxDEV","UserInterface","_s","serial","serialOptions","baudRate","ConnectedPortWriter","writer","IsConnected","setIsConnected","ControlMode","setControlMode","TuningData","setTuningData","KP","KD","Max_Speed","d","document","addEventListener","handleKeyPress","current","console","log","ChangeMode","ModeSelected","onUserClickSend","DrivingCommandHandler","Mode","PressedKeyCode","TuningCommanderHandler","keypressed","code","onUserChangeTuningData","MessageToSend","write","OnUserClickConnect","connect","then","err","disconnect","e","TuningPanelRender","fileName","_jsxFileName","lineNumber","columnNumber","style","display","children","ModeSelecxted","paddingLeft","width","onClick","variant","_c","$RefreshReg$"],"sources":["/Users/dennischang/My Drive/Engineering/Projects/Line_Follower/Software/UserInterface/robot-sumo-dashboard/src/UserInterface.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Button from '@mui/material/Button';\nimport ControlPanel from './Control-Panel/ControlPanel';\nimport TuningPanel from './Tuning/TuningPanel';\nimport { BrowserSerial } from \"browser-serial\";\n\n\n\nconst UserInterface = () => {\n    const serial = new BrowserSerial({ serialOptions: { baudRate: 115200 } });\n    let ConnectedPortWriter;\n    let writer\n    const [IsConnected, setIsConnected] = useState(false);\n    const [ControlMode, setControlMode] = useState(\"\");\n    const [TuningData, setTuningData] = useState({\n        KP: 1,\n        KD: 1,\n        Max_Speed: 1,\n    });\n\n    const d = useRef(ControlMode);\n\n    // const handleKeyPress = (event) => {\n    //     CommandHandler(event.code)\n    // }\n\n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyPress, true)\n    }, [])\n\n    useEffect(() => {\n        d.current = ControlMode;\n    }, [ControlMode]);\n\n    useEffect(() => {\n        console.log(IsConnected); // Log whenever IsConnected changes\n    }, [IsConnected]);\n\n\n    const ChangeMode = ({ ModeSelected }) => {\n        setControlMode(ModeSelected);\n    }\n\n\n\n    const onUserClickSend = () => {\n        DrivingCommandHandler({ Mode: \"Tuning\", PressedKeyCode: \"B\" })\n        // TuningCommanderHandler({ Mode: ControlMode, TuningData: TuningData })\n    }\n\n    const TuningCommanderHandler = ({ Mode, TuningData }) => {\n        // console.log(\"Wr\")\n        DrivingCommandHandler({ Mode: d.current, PressedKeyCode: \"B\" })\n    }\n\n    const handleKeyPress = (keypressed) => {\n        DrivingCommandHandler({ Mode: d.current, PressedKeyCode: keypressed.code })\n    }\n\n\n    const onUserChangeTuningData = ({ KP, KD, Max_Speed }) => {\n        setTuningData({\n            ...TuningData,\n            KP: KP ? KP : TuningData.KP,\n            KD: KD ? KD : TuningData.KD,\n            Max_Speed: Max_Speed ? Max_Speed : TuningData.Max_Speed,\n        })\n    }\n\n    const DrivingCommandHandler = ({ Mode, PressedKeyCode }) => {\n        let MessageToSend = ''\n        if (Mode == 'Driving') { // Driving Mode\n            switch (PressedKeyCode) {\n                case 'KeyA':\n                    MessageToSend = 'L';\n                    break;\n                case 'KeyD':\n                    MessageToSend = 'R';\n                    break;\n                case 'KeyS':\n                    MessageToSend = 'B';\n                    break;\n                case 'KeyW':\n                    MessageToSend = 'F';\n                    break;\n                case 'Space':\n                    MessageToSend = 'S';\n                    break;\n                default:\n                    break;\n            }\n            if (MessageToSend) {\n                console.log(`${Mode[0]}${MessageToSend}`)\n                serial.write(`${Mode[0]}${MessageToSend}`);\n            }\n        }\n    }\n\n\n\n    const OnUserClickConnect = async () => {\n        if (IsConnected == false) {\n            try {\n                await serial.connect().then(() => {\n                    setIsConnected(true)\n                })\n            }\n            catch (err) { console.log(err) }\n        } else {\n            try {\n                await serial.disconnect().then(() => {\n                    setIsConnected(false)\n                })\n            } catch (e) {\n            }\n        }\n    }\n\n\n\n    const TuningPanelRender = () => {\n        if (ControlMode == \"Tuning\") {\n            return <TuningPanel\n                onUserChangeTuningData={onUserChangeTuningData} TuningData={TuningData}\n                onUserClickSend={onUserClickSend} />\n        }\n    }\n\n    return (\n        <div style={{ display: \"flex\" }}>\n            <ControlPanel ModeSelecxted={ControlMode} ChangeMode={ChangeMode} />\n            <div style={{ paddingLeft: \"2vw\", width: \"100%\" }}>\n                <h2>Line Follower Console</h2>\n                <Button onClick={OnUserClickConnect} variant={IsConnected ? \"contained\" : \"outlined\"}>{IsConnected ? \"Click to Disconnect\" : \"Click to Connect Device\"}</Button>\n                {TuningPanelRender()}s\n            </div>\n        </div >\n    );\n}\n\nexport default UserInterface"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}